1. Login/Signup User 
	1. Admin
	2. Restaurant owner
	3. Customer
	4. JWT based Authentication + Authorization

2. Restaurant Owner
	1. Add branches
	2. Add tables at each branch( city level for simplicity)
	3. Add Dishes with price
	4. View booked tables by customer

3. Customer 
	1. Search by city
	2. Search by restaurant
	3. Search by food
	4. Book table at a restaurant date and start time
	
4. Admin
	1. View Restaurant tables and bookings
	2. View Restaurant foods
	3. View Customer bookings
	4. Add food categories
	5. Add Cities
	6. Add Dishes
	7. Add table

5. Assumptions
	1. Each slot is for 1 hour? No
	2. Can book for only T + 1 day
	3. One owner per restaurant? Yes
	4. Owner has multiple Restaurants? Yes
	5. User has Multiple roles? Yes
	6. Different Menu at each branch? No
	7. Availability at table level? No
	8. Removal supported? Yes
	9. Restaurant has multiple branches in a city? No
	10. An owner of an restaurant cannot update details of other restaurant? Obviously
	11. Image or Blob ? 

6. Practices to be followed
	1. REST
	2. Git commit
	3. SQL 
	4. Spring Data JPA
	5. Spring security
	6. Unit test cases
	7. Validation: An owner cannot update details of other restaurant
	8. Documentation

7. Future Enhancements
	1. Spring AOP
	2. Caching
	3. Data JPA Auditing

Learning:
	1. Normalization multiple branches for restaurant using xNF
	2. Normalization food category to avoid multiple names
	4. Designing DB
	5. ControllerAdvice does not handle filter /errors, have to get it handled by first filter
		and map it to Default Exception resolver also handle RuntimeException
	6. JOIN FETCH to avoid N + 1
	7. Data JPA updates all fields by default
	8. RBAC ABAC
	




	